#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'thor'
require 'check_passenger'

class CheckPassengerCLI < Thor
  include CheckPassenger::NagiosCheck

  class_option :app, aliases: 'a', banner: 'Limit check to APP'
  class_option :include_all, type: :boolean,
                banner: 'Also include counter for all running apps'
  class_option :passenger_status_path, aliases: 'p', banner: 'Path to passenger-status command'

  desc 'memory', 'Check Passenger memory'
  option :warn, banner: 'Memory usage threshold to raise warning status', aliases: 'w'
  option :crit, banner: 'Memory usage threshold to raise critical status', aliases: 'c'
  def memory
    preprocess_options
    output_status, output_data = CheckPassenger::Check.memory(options)
    nagios_output(output_status, output_data)
  end

  desc 'processes', 'Check Passenger processes'
  option :warn, aliases: 'w', banner: 'Process count threshold to raise warning status'
  option :crit, aliases: 'c', banner: 'Process count threshold to raise critical status'
  def processes
    preprocess_options
    output_status, output_data = CheckPassenger::Check.process_count(options)
    nagios_output(output_status, output_data)
  end

  desc 'live_processes', 'Check Passenger live processes'
  option :warn, aliases: 'w', banner: 'Live process count threshold to raise warning status'
  option :crit, aliases: 'c', banner: 'Live process count threshold to raise critical status'
  def live_processes
    preprocess_options
    output_status, output_data = CheckPassenger::Check.live_process_count(options)
    nagios_output(output_status, output_data)
  end

  private

  def preprocess_options
    if options[:include_all] and options[:app]
      raise ArgumentError, 'Data for all apps can only be included when monitoring a global counter'
    end
  end
end

CheckPassengerCLI.start(ARGV)
