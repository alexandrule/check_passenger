#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'thor'
require 'check_passenger'

class CheckPassengerCLI < Thor
  include CheckPassenger::NagiosCheck

  class_option :include_all, type: :boolean,
  class_option :app_name, aliases: 'n', banner: 'Limit check to application with APP_NAME'
  class_option :debug, aliases: 'D', type: :boolean, banner: 'Debug mode'
                banner: 'Also include counter for all running apps'
  class_option :passenger_status_path, aliases: 'p', banner: 'Path to passenger-status command'
  class_option :cache, type: :boolean,
                banner: 'Cache data to avoid fast successive calls to passenger-status'

  desc 'memory', 'Check Passenger memory'
  option :warn, banner: 'Memory usage threshold to raise warning status', aliases: 'w'
  option :crit, banner: 'Memory usage threshold to raise critical status', aliases: 'c'
  def memory
    run_check do
      CheckPassenger::Check.memory(options)
    end
  end

  desc 'processes', 'Check Passenger processes'
  option :warn, aliases: 'w', banner: 'Process count threshold to raise warning status'
  option :crit, aliases: 'c', banner: 'Process count threshold to raise critical status'
  def processes
    run_check do
      CheckPassenger::Check.process_count(options)
    end
  end

  desc 'live_processes', 'Check Passenger live processes'
  option :warn, aliases: 'w', banner: 'Live process count threshold to raise warning status'
  option :crit, aliases: 'c', banner: 'Live process count threshold to raise critical status'
  def live_processes
    run_check do
      CheckPassenger::Check.live_process_count(options)
    end
  end

  private

  def run_check
    if options[:include_all] and options[:app_name]
      raise ArgumentError, 'Data for all apps can only be included when monitoring a global counter'
    end

    output_status, output_data = yield
    nagios_output(output_status, output_data)

  rescue CheckPassenger::StatusOutputError => e
    if options[:debug]
      raise
    else
      nagios_error('Passenger UNKNOWN - An error occurred while parsing passenger-status output: %s' % e.message)
    end
  rescue StandardError => e
    if options[:debug]
      raise
    else
      nagios_error('Passenger UNKNOWN - %s: %s' % [e.class.to_s, e.message])
    end
  end
end

CheckPassengerCLI.start(ARGV)
